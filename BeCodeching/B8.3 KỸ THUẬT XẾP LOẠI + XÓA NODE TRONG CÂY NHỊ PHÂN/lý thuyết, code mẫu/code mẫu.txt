#include <iostream>
#include <fstream>
using namespace std;

struct node
{
	//---- data --- 
	int data;
	//--- pointer ---
	node *pleft;
	node *pright;
};
typedef struct node node;
typedef struct node* tree;
//======================================
node* khoi_tao_node(int x);
void them(tree &t, int x);
void NLR(tree t);
//-----------------------
void load_file(tree &t);
//-------------------
void xep_loai(tree t);
//---------------------
void tim_node_the_mang(node *&k, tree &t);//k = t->pleft
void xoa(tree &t, int vt);

void main()
{
	//---- setting ---
	tree t = NULL;
	//--- loadfile ---
	load_file(t);
	//---- play ---
	while (true)
	{
		system("cls");
		cout << "1. Nhap pt" << endl;
		cout << "2. Xuat" << endl;
		cout << "3. Xep loai" << endl;
		cout << "4. Xoa node vt nhap tu ban phim" << endl;
		int lc;cout << "Nhap lc: ";cin >> lc;
		switch (lc)
		{
		case 1:
		{
			int sl;cout << "Nhap sl pt can them: ";cin >> sl;
			for (int i = 1;i <= sl;i++)//for each
			{
				int x;
				cout << "Nhap pt thu " << i << ": ";cin >> x;
				//--- thêm ---
				them(t, x);
			}
			break;
		}
		case 2:
		{
			NLR(t);
			system("pause");
			break;
		}
		case 3:
		{
			xep_loai(t);
			system("pause");
			break;
		}
		case 4:
		{
			int vt;cout << "Nhap gia tri co vt can xoa: ";cin >> vt;
			xoa(t, vt);
			break;
		}
		}
	}
	system("pause");
}
//====================
node* khoi_tao_node(int x)
{
	node *p = new node;
	p->data = x;
	p->pleft = NULL;
	p->pright = NULL;
	return p;
}
void them(tree &t, int x)
{
	if (t == NULL)
	{
		node *p = khoi_tao_node(x);
		t = p;
	}
	else
	{
		if (x > t->data)
		{
			them(t->pright, x);
		}
		else if (x < t->data)
		{
			them(t->pleft, x);
		}
	}
}
void NLR(tree t)
{
	if (t != NULL)
	{
		//---- node ----
		cout << t->data << endl;
		//---- left ----
		NLR(t->pleft);
		//---- right ----
		NLR(t->pright);
	}
}
//-----------------------
void load_file(tree &t)
{
	ifstream fi("ds_cay.txt");
	while (fi.eof()==false)
	{
		int x;
		fi >> x;
		fi.ignore();//bỏ ,
		//--- thêm ---
		them(t, x);
	}
	fi.close();
}
//--------------------------------
void xep_loai(tree t)
{
	if (t != NULL)
	{
		//---- node ----
		if (t->pleft == NULL && t->pright == NULL)
		{
			cout << "Node la: " << t->data << endl;
		}
		else if ((t->pleft == NULL && t->pright != NULL) || (t->pleft != NULL && t->pright == NULL))
		{
			cout << "Node 1 con: " << t->data << endl;
		}
		else if(t->pleft!= NULL && t->pright!=NULL)
		{
			cout << "Node 2 con: " << t->data << endl;
		}
		//---- left ----
		xep_loai(t->pleft);
		//---- right ----
		xep_loai(t->pright);
	}
}
//---------------------
void tim_node_the_mang(node *&k,tree &t)//k = t->pleft
{
	if (k->pright == NULL)//Phải cùng
	{
		t->data = k->data;
		//---- xoá node 1 con hoặc node lá khi biết cây con phải là NULL --
		node *tam = k;
		k = k->pleft;
		delete tam;
	}
	else
	{
		tim_node_the_mang(k->pright, t);
	}
}
void xoa(tree &t, int vt)
{
	if (t != NULL)
	{
		if (t->data == vt)
		{
			if (t->pleft == NULL && t->pright == NULL)//lá
			{
				delete t;
				t = NULL;
			}
			else if (t->pleft != NULL && t->pright == NULL)//1 con trái
			{
				node *tam = t;
				t = t->pleft;
				delete tam;
			}
			else if (t->pleft == NULL && t->pright != NULL)//1 con phải
			{
				node *tam = t;
				t = t->pright;
				delete tam;
			}
			else if (t->pleft != NULL && t->pright != NULL)
			{
				tim_node_the_mang(t->pleft, t);
			}
		}
		else if (vt > t->data)
		{
			xoa(t->pright, vt);
		}
		else if (vt < t->data)
		{
			xoa(t->pleft, vt);
		}
	}
}