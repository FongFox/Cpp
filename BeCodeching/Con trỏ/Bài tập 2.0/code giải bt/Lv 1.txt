Bài 1: Cho 1 dãy số nguyên.Viết chương trình xóa các phần tử là số đối xứng.
#include<iostream>
#define MAX 100
using namespace std;
void input_element(int& n);
void input_number(int n, int* p);
void output(int n, int* p);
int checking(int n);
void deleting(int nold, int*& p, int nnew, int vt);
void check_and_delete_opposite_number(int& n, int*& p);
void main()
{
	int n;
	input_element(n);
	int* p = new int[n];
	input_number(n, p);
	output(n, p);
	check_and_delete_opposite_number(n, p);
	output(n, p);
	system("pause");
}
void input_element(int& n)
{
	cout << "Nhap phan tu can dung: "; cin >> n;
}
void input_number(int n, int* p)
{
	for (int i = 0; i < n; i++)
	{
		cout << "Nhap phan tu thu " << i << " : "; cin >> p[i];
	}
}
void output(int n, int* p)
{
	cout << endl << "============================ Xuat ========================" << endl;
	for (int i = 0; i < n; i++)
	{
		cout << "p[" << i << "]= " << p[i] << endl;
	}
}
int checking(int n)
{
	int remainder;
	int reverse_num = 0;
	while (n != 0)
	{
		remainder = n % 10;
		reverse_num = remainder + reverse_num * 10;
		n /= 10;
	}
	return reverse_num;
}
void deleting(int nold, int*& p, int nnew, int vt)
{
	int* tam = p;
	p = new int[nnew]; int j = 0;
	for (int i = 0; i < nold; i++)
	{
		if (i == vt)
		{
			continue;
		}
		p[j] = tam[i]; j += 1;
	}
	if (tam != NULL)
	{
		delete[] tam;
	}
}
void check_and_delete_opposite_number(int& n, int*&p)
{
	for (int i = 0; i < n; i++)
	{
		int check = checking(p[i]);
		if (check == p[i])
		{
			deleting(n, p, n - 1, i);
			n -= 1; i -= 1;
		}
	}
}
================================================================================================================================================================================================
Bài 2: Cho 1 dãy số nguyên. Viết chương trình thêm phần tử 0 vào trước các số hoàn thiện
#include<iostream>
#define MAX 100
using namespace std;
void input_e(int& n);
void input_n(int n, int* p);
void output(int n, int* p);
int checking(int n);
void cap_phat(int nold, int*& p, int nnew);
void adding(int& n, int*& p, int vt, int x);
void add_0(int& n, int*& p);
int main()
{
	int n; 
	input_e(n);
	int* p = new int[n];
	input_n(n, p);
	output(n, p);
	add_0(n, p);
	output(n, p);
	system("pause");
}
void input_e(int& n)
{
	cout << "Nhap phan tu can dung: "; cin >> n;
}
void input_n(int n, int* p)
{
	for (int i = 0; i < n; i++)
	{
		cout << "Nhap phan tu thu " << i << " : "; cin >> p[i];
	}
}
void output(int n, int* p)
{
	cout << endl << "============================ Xuat =============================" << endl;
	for (int i = 0; i < n; i++)
	{
		cout << "p[" << i << "]= " << p[i] << endl;
	}
}
int checking(int n)
{
	int sum = 0;
	for (int i = 1; i <= n / 2; i++)
	{
		if (n % i == 0)
		{
			sum += i;
		}
	}
	return sum;
}
void cap_phat(int nold, int*& p, int nnew)
{
	int* tam = p;
	p = new int[nnew];
	for (int i = 0; i < nold; i++)
	{
		p[i] = tam[i];
	}
	if (tam != NULL)
	{
		delete[] tam;
	}
}
void adding(int& n, int*& p, int vt, int x)
{
	cap_phat(n, p, n + 1);
	for (int i = n; i > vt; i--)
	{
		p[i] = p[i - 1];
	}
	p[vt] = x;
	n += 1;
}
void add_0(int& n, int*& p)
{
	for (int i = 0; i < n; i++)
	{
		int check = checking(p[i]);
		if (check == p[i])
		{
			adding(n, p, i, 0);
			i += 1;
		}
	}
}
======================================================================================================================================================================================================================================================================================
Bài 3. Cho mảng 1 chiều các số nguyên.Viết chương trình xóa các phần tử trùng nhau trong mảng, chỉ giữ lại duy nhất một phần tử phân biệt.
VD : 1 4 2 2 1 5 4
==> 1 4 2 5
#include<iostream>
#define MAX 100
using namespace std;
void input_e(int& e);
void input_n(int e, int* p);
void output(int e, int* p);
void cap_phat(int nold, int*& p, int nnew, int vt);
void adding(int& n, int*& p);
int main()
{
	int n;
	input_e(n);
	int* p = new int[n];
	input_n(n, p);
	output(n, p);
	adding(n, p);
	output(n, p);
	system("pause");
}
void input_e(int& e)
{
	cout << "Nhap phan tu can dung: "; cin >> e;
}
void input_n(int e, int* p)
{
	for (int i = 0; i < e; i++)
	{
		cout << "Nhap phan tu thu " << i << " : "; cin >> p[i];
	}
}
void output(int e, int* p)
{
	cout << endl << "=========================== Xuat ===========================" << endl;
	for (int i = 0; i < e; i++)
	{
		cout << "p[" << i << "]= " << p[i] << endl;
	}
}
void cap_phat(int nold, int*& p, int nnew, int vt)
{
	int* tam = p;
	p = new int[nnew]; int j = 0;
	for (int i = 0; i < nold; i++)
	{
		if (i == vt)
		{
			continue;
		}
		p[j] = tam[i]; j += 1;
	}
	if (tam != NULL)
	{
		delete[] tam;
	}
}
void adding(int& n, int*& p)
{
	for (int i = 0; i < n - 1; i++)
	{
		for (int j = i + 1; j < n; j++)
		{
			if (p[i] == p[j])
			{
				cap_phat(n, p, n - 1, j);
				n -= 1;
			}
		}
	}
}
======================================================================================================================================================================================================================================================================================
Bài 4. Cho mảng 1 chiều các số nguyên.Viết chương trình đếm số lần xuất hiện của từng phần tử trong mảng.
VD :
	1 3 5 2 3 1
	==>
	Phần tử	Số lần xuất hiện
	1 	2
	2	1
	3	2
	5 	1
#include<iostream>
using namespace std;
void input_e(int& n);
void input_n(int n, int* p);
void output(int n, int* p);
void counting(int n, int* p);
int main()
{
	int n;
	input_e(n);
	int* p = new int[n];
	input_n(n, p);
	output(n, p);
	counting(n, p);
	system("pause");
}
void input_e(int& n)
{
	cout << "Nhap phan tu can dung: "; cin >> n;
}
void input_n(int n, int* p)
{
	for (int i = 0; i < n; i++)
	{
		cout << "Nhap phan tu thu " << i << " : "; cin >> p[i];
	}
}
void output(int n, int* p)
{
	cout << endl << "====================== Xuat =====================" << endl;
	for (int i = 0; i < n; i++)
	{
		cout << "p[" << i << "]= " << p[i] << endl;
	}
}
void counting(int n, int* p)
{
	cout << endl << "\t" << "So lan phan tu xuat hien" << endl;
	for (int i = 0; i < n; i++)
	{
		bool check = true; int c = 1;
		for (int k = 0; k < i; k++)
		{
			if (p[i] == p[k])
			{
				check = false;
				break;
			}
		}
		if (check)
		{
			for (int j = i + 1; j < n; j++)
			{
				if (p[i] == p[j])
				{
					c += 1;
				}
			}
		}
		else continue;
		cout << p[i] << "\t\t" << c << endl;
	}
}
